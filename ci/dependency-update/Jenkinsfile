/*
 * Hibernate Search, full-text search for your domain model
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later
 * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
 */

@Library('hibernate-jenkins-pipeline-helpers@1.5') _

Map settings() {
	switch (env.DEPENDENCY_UPDATE_NAME) {
		case 'orm5.4':
			return [
					mavenArgs: """ \
							-pl orm \
					""",
					updateProperties: ['version.org.hibernate']
			]
		default:
			return [:]
	}
}

def withMavenWorkspace(Closure body) {
	withMaven(jdk: 'OpenJDK 8 Latest', maven: 'Apache Maven 3.6',
			mavenLocalRepo: env.WORKSPACE_TMP + '/.m2repository',
			options: [artifactsPublisher(disabled: true)]) {
		body()
	}
}

pipeline {
	agent none
	triggers {
		// Run at least once per week, in case of snapshot updates.
		cron '@weekly'
	}
	options {
		buildDiscarder logRotator(daysToKeepStr: '10', numToKeepStr: '3')
		disableConcurrentBuilds(abortPrevious: true)
		// Run at most twice per week, to preserve CI workers for more urgent tasks.
		rateLimitBuilds(throttle: [count: 2, durationName: 'week', userBoost: true])
	}
	stages {
		stage('Update dependency and test') {
			matrix {
				agent {
					label 'Worker'
				}
				axes {
					axis {
						name 'DEPENDENCY_UPDATE_NAME'
						values 'orm5.4'
					}
				}
				stages {
					stage('Update dependency') {
						steps {
							withMavenWorkspace {
								sh "ci/dependency-update/perform-update.sh ${env.DEPENDENCY_UPDATE_NAME} '${settings().updateProperties?.join(",") ?: ''}'"
							}
							script {
								if (0 != sh(script: "git diff origin/${BRANCH_NAME} | grep -q '.'", returnStatus: true)) {
									error "This job does not seem to update any dependency; perhaps it is misconfigured? The source code has not been updated, neither by merging a WIP branch nor by updating version properties."
								}
							}
						}
					}
					// If we're going to execute only a few tests,
					// make sure all artifacts are built and can be used as dependency in those tests.
					stage('Pre-build') {
						when {
							expression {
								return !settings().mavenArgs.isBlank()
							}
						}
						options {
							timeout(time: 30, unit: 'MINUTES')
						}
						steps {
							withMavenWorkspace {
								sh """ \
									mvn clean install -U -Pdependency-update -Pdist -DskipTests \
								"""
							}
						}
					}
					stage('Test') {
						options {
							timeout(time: 1, unit: 'HOURS')
						}
						steps {
							withMavenWorkspace {
								sh """ \
									mvn clean install -U -Pdependency-update -Pdist -Dsurefire.environment=${env.DEPENDENCY_UPDATE_NAME} \
									--fail-at-end \
									${settings().mavenArgs} \
								"""
							}
						}
					}
				}
			}
		}
	}
	post {
		always {
			notifyBuildResult notifySuccessAfterSuccess: true, maintainers: 'yoann@hibernate.org'
		}
	}
}
